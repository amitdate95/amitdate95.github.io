{"version":3,"file":"static/js/962.84fa7f3d.chunk.js","mappings":"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","sources":["../node_modules/@tauri-apps/api/event.js","../node_modules/@tauri-apps/api/window.js","../node_modules/@tauri-apps/api/helpers/tauri.js","../node_modules/@tauri-apps/api/helpers/event.js"],"sourcesContent":["import { listen as listen$1, once as once$1, emit as emit$1 } from './helpers/event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_FILE_DROP\"] = \"tauri://file-drop\";\n    TauriEvent[\"WINDOW_FILE_DROP_HOVER\"] = \"tauri://file-drop-hover\";\n    TauriEvent[\"WINDOW_FILE_DROP_CANCELLED\"] = \"tauri://file-drop-cancelled\";\n    TauriEvent[\"MENU\"] = \"tauri://menu\";\n    TauriEvent[\"CHECK_UPDATE\"] = \"tauri://update\";\n    TauriEvent[\"UPDATE_AVAILABLE\"] = \"tauri://update-available\";\n    TauriEvent[\"INSTALL_UPDATE\"] = \"tauri://update-install\";\n    TauriEvent[\"STATUS_UPDATE\"] = \"tauri://update-status\";\n    TauriEvent[\"DOWNLOAD_PROGRESS\"] = \"tauri://update-download-progress\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Listen to an event. The event can be either global or window-specific.\n * See {@link Event.windowLabel} to check the event source.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error in window ${event.windowLabel}, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler) {\n    return listen$1(event, null, handler);\n}\n/**\n * Listen to an one-off event. See {@link listen} for more information.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler) {\n    return once$1(event, null, handler);\n}\n/**\n * Emits an event to the backend and all Tauri windows.\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    return emit$1(event, undefined, payload);\n}\n\nexport { TauriEvent, emit, listen, once };\n","import { invokeTauriCommand } from './helpers/tauri.js';\nimport { listen, once, emit } from './helpers/event.js';\nimport { TauriEvent } from './event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * This package is also accessible with `window.__TAURI__.window` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.window`](https://tauri.app/v1/api/config/#allowlistconfig.window) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"window\": {\n *         \"all\": true, // enable all window APIs\n *         \"create\": true, // enable window creation\n *         \"center\": true,\n *         \"requestUserAttention\": true,\n *         \"setResizable\": true,\n *         \"setMaximizable\": true,\n *         \"setMinimizable\": true,\n *         \"setClosable\": true,\n *         \"setTitle\": true,\n *         \"maximize\": true,\n *         \"unmaximize\": true,\n *         \"minimize\": true,\n *         \"unminimize\": true,\n *         \"show\": true,\n *         \"hide\": true,\n *         \"close\": true,\n *         \"setDecorations\": true,\n *         \"setAlwaysOnTop\": true,\n *         \"setContentProtected\": true,\n *         \"setSize\": true,\n *         \"setMinSize\": true,\n *         \"setMaxSize\": true,\n *         \"setPosition\": true,\n *         \"setFullscreen\": true,\n *         \"setFocus\": true,\n *         \"setIcon\": true,\n *         \"setSkipTaskbar\": true,\n *         \"setCursorGrab\": true,\n *         \"setCursorVisible\": true,\n *         \"setCursorIcon\": true,\n *         \"setCursorPosition\": true,\n *         \"setIgnoreCursorEvents\": true,\n *         \"startDragging\": true,\n *         \"print\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Window events\n *\n * Events can be listened to using `appWindow.listen`:\n * ```typescript\n * import { appWindow } from \"@tauri-apps/api/window\";\n * appWindow.listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * A size represented in logical pixels.\n *\n * @since 1.0.0\n */\nclass LogicalSize {\n    constructor(width, height) {\n        this.type = 'Logical';\n        this.width = width;\n        this.height = height;\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 1.0.0\n */\nclass PhysicalSize {\n    constructor(width, height) {\n        this.type = 'Physical';\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize();\n     * const logical = size.toLogical(factor);\n     * ```\n     *  */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 1.0.0\n */\nclass LogicalPosition {\n    constructor(x, y) {\n        this.type = 'Logical';\n        this.x = x;\n        this.y = y;\n    }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 1.0.0\n */\nclass PhysicalPosition {\n    constructor(x, y) {\n        this.type = 'Physical';\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * const position = await appWindow.innerPosition();\n     * const logical = position.toLogical(factor);\n     * ```\n     * */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n}\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\n/**\n * Get an instance of `WebviewWindow` for the current webview window.\n *\n * @since 1.0.0\n */\nfunction getCurrent() {\n    return new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `WebviewWindow` for all available webview windows.\n *\n * @since 1.0.0\n */\nfunction getAll() {\n    return window.__TAURI_METADATA__.__windows.map((w) => new WebviewWindow(w.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    }));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * A webview window handle allows emitting and listening to events from the backend that are tied to the window.\n *\n * @ignore\n * @since 1.0.0\n */\nclass WebviewWindowHandle {\n    constructor(label) {\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n    }\n    /**\n     * Listen to an event emitted by the backend or webview.\n     * The event must either be a global event or an event targetting this window.\n     *\n     * See {@link WebviewWindow.emit | `emit`} for more information.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const unlisten = await appWindow.listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(() => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return listen(event, this.label, handler);\n    }\n    /**\n     * Listen to an one-off event.\n     * See {@link WebviewWindow.listen | `listen`} for more information.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const unlisten = await appWindow.once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(() => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return once(event, this.label, handler);\n    }\n    /**\n     * Emits an event to the backend and all Tauri windows.\n     * The event will have this window's {@link WebviewWindow.label | label} as {@link Event.windowLabel | source window label}.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * This function can also be used to communicate between windows:\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.listen('sync-data', (event) => { });\n     *\n     * // on another window...\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const otherWindow = WebviewWindow.getByLabel('other')\n     * await otherWindow.emit('sync-data');\n     * ```\n     *\n     * Global listeners are also triggered:\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * import { listen } from '@tauri-apps/api/event';\n     * await listen('ping', (event) => { });\n     *\n     * await appWindow.emit('ping');\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({ event, id: -1, windowLabel: this.label, payload });\n            }\n            return Promise.resolve();\n        }\n        return emit(event, this.label, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Manage the current window object.\n *\n * @ignore\n * @since 1.0.0\n */\nclass WindowManager extends WebviewWindowHandle {\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     * */\n    async scaleFactor() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'scaleFactor'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const position = await appWindow.innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     *  */\n    async innerPosition() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'innerPosition'\n                    }\n                }\n            }\n        }).then(({ x, y }) => new PhysicalPosition(x, y));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const position = await appWindow.outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     *  */\n    async outerPosition() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'outerPosition'\n                    }\n                }\n            }\n        }).then(({ x, y }) => new PhysicalPosition(x, y));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const size = await appWindow.innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */\n    async innerSize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'innerSize'\n                    }\n                }\n            }\n        }).then(({ width, height }) => new PhysicalSize(width, height));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const size = await appWindow.outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */\n    async outerSize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'outerSize'\n                    }\n                }\n            }\n        }).then(({ width, height }) => new PhysicalSize(width, height));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const fullscreen = await appWindow.isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     *  */\n    async isFullscreen() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isFullscreen'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const minimized = await appWindow.isMinimized();\n     * ```\n     *\n     * @since 1.3.0\n     * */\n    async isMinimized() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMinimized'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const maximized = await appWindow.isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     * */\n    async isMaximized() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMaximized'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const focused = await appWindow.isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     *\n     * @since 1.4\n     * */\n    async isFocused() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isFocused'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const decorated = await appWindow.isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     *  */\n    async isDecorated() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isDecorated'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const resizable = await appWindow.isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     *  */\n    async isResizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isResizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const maximizable = await appWindow.isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     *  */\n    async isMaximizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMaximizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const minimizable = await appWindow.isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     *  */\n    async isMinimizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMinimizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const closable = await appWindow.isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     *  */\n    async isClosable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isClosable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const visible = await appWindow.isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     *  */\n    async isVisible() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isVisible'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const title = await appWindow.title();\n     * ```\n     *\n     * @since 1.3.0\n     * */\n    async title() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'title'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const theme = await appWindow.theme();\n     * ```\n     *\n     * @returns The window theme.\n     * */\n    async theme() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'theme'\n                    }\n                }\n            }\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async center() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'center'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.requestUserAttention();\n     * ```\n     *\n     * @param requestType\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: 'Critical' };\n            }\n            else {\n                requestType_ = { type: 'Informational' };\n            }\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'requestUserAttention',\n                        payload: requestType_\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setResizable(false);\n     * ```\n     *\n     * @param resizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setResizable(resizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setResizable',\n                        payload: resizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setMaximizable(false);\n     * ```\n     *\n     * @param maximizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMaximizable',\n                        payload: maximizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setMinimizable(false);\n     * ```\n     *\n     * @param minimizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMinimizable',\n                        payload: minimizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setClosable(false);\n     * ```\n     *\n     * @param closable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setClosable',\n                        payload: closable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setTitle(title) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setTitle',\n                        payload: title\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async maximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'maximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unmaximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'unmaximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async toggleMaximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'toggleMaximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async minimize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'minimize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unminimize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'unminimize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'show'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'hide'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Closes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'close'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setDecorations(decorations) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setDecorations',\n                        payload: decorations\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setAlwaysOnTop',\n                        payload: alwaysOnTop\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 1.2.0\n     */\n    async setContentProtected(protected_) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setContentProtected',\n                        payload: protected_\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        if (!size || (size.type !== 'Logical' && size.type !== 'Physical')) {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setSize',\n                        payload: {\n                            type: size.type,\n                            data: {\n                                width: size.width,\n                                height: size.height\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { appWindow, PhysicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinSize(size) {\n        if (size && size.type !== 'Logical' && size.type !== 'Physical') {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMinSize',\n                        payload: size\n                            ? {\n                                type: size.type,\n                                data: {\n                                    width: size.width,\n                                    height: size.height\n                                }\n                            }\n                            : null\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaxSize(size) {\n        if (size && size.type !== 'Logical' && size.type !== 'Physical') {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMaxSize',\n                        payload: size\n                            ? {\n                                type: size.type,\n                                data: {\n                                    width: size.width,\n                                    height: size.height\n                                }\n                            }\n                            : null\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await appWindow.setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        if (!position ||\n            (position.type !== 'Logical' && position.type !== 'Physical')) {\n            throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setPosition',\n                        payload: {\n                            type: position.type,\n                            data: {\n                                x: position.x,\n                                y: position.y\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFullscreen(fullscreen) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setFullscreen',\n                        payload: fullscreen\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setFocus'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you need the `icon-ico` or `icon-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"icon-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIcon(icon) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setIcon',\n                        payload: {\n                            // correctly serialize Uint8Arrays\n                            icon: typeof icon === 'string' ? icon : Array.from(icon)\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSkipTaskbar(skip) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setSkipTaskbar',\n                        payload: skip\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorGrab(grab) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorGrab',\n                        payload: grab\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorVisible(visible) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorVisible',\n                        payload: visible\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorIcon(icon) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorIcon',\n                        payload: icon\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await appWindow.setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorPosition(position) {\n        if (!position ||\n            (position.type !== 'Logical' && position.type !== 'Physical')) {\n            throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorPosition',\n                        payload: {\n                            type: position.type,\n                            data: {\n                                x: position.x,\n                                y: position.y\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setIgnoreCursorEvents',\n                        payload: ignore\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startDragging() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'startDragging'\n                    }\n                }\n            }\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = mapPhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = mapPhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await appWindow.onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    /* eslint-disable @typescript-eslint/promise-function-async */\n    async onCloseRequested(handler) {\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, (event) => {\n            const evt = new CloseRequestedEvent(event);\n            void Promise.resolve(handler(evt)).then(() => {\n                if (!evt.isPreventDefault()) {\n                    return this.close();\n                }\n            });\n        });\n    }\n    /* eslint-enable */\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the window menu item click. The payload is the item id.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onMenuClicked(({ payload: menuId }) => {\n     *  console.log('Menu clicked: ' + menuId);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onMenuClicked(handler) {\n        return this.listen(TauriEvent.MENU, handler);\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the window,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onFileDropEvent((event) => {\n     *  if (event.payload.type === 'hover') {\n     *    console.log('User hovering', event.payload.paths);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onFileDropEvent(handler) {\n        const unlistenFileDrop = await this.listen(TauriEvent.WINDOW_FILE_DROP, (event) => {\n            handler({ ...event, payload: { type: 'drop', paths: event.payload } });\n        });\n        const unlistenFileHover = await this.listen(TauriEvent.WINDOW_FILE_DROP_HOVER, (event) => {\n            handler({ ...event, payload: { type: 'hover', paths: event.payload } });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.WINDOW_FILE_DROP_CANCELLED, (event) => {\n            handler({ ...event, payload: { type: 'cancel' } });\n        });\n        return () => {\n            unlistenFileDrop();\n            unlistenFileHover();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * @since 1.0.2\n */\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.windowLabel = event.windowLabel;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\n/**\n * Create new webview windows and get a handle to existing ones.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * // loading embedded asset:\n * const webview = new WebviewWindow('theUniqueLabel', {\n *   url: 'path/to/page.html'\n * });\n * // alternatively, load a remote URL:\n * const webview = new WebviewWindow('theUniqueLabel', {\n *   url: 'https://github.com/tauri-apps/tauri'\n * });\n *\n * webview.once('tauri://created', function () {\n *  // webview window successfully created\n * });\n * webview.once('tauri://error', function (e) {\n *  // an error happened creating the webview window\n * });\n *\n * // emit an event to the backend\n * await webview.emit(\"some event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await webview.listen(\"event name\", e => {});\n * unlisten();\n * ```\n *\n * @since 1.0.2\n */\nclass WebviewWindow extends WindowManager {\n    /**\n     * Creates a new WebviewWindow.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const webview = new WebviewWindow('my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview window successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview window\n     * });\n     * ```\n     *\n     * * @param label The unique webview window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The WebviewWindow instance to communicate with the webview.\n     */\n    constructor(label, options = {}) {\n        super(label);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!options?.skip) {\n            invokeTauriCommand({\n                __tauriModule: 'Window',\n                message: {\n                    cmd: 'createWebview',\n                    data: {\n                        options: {\n                            label,\n                            ...options\n                        }\n                    }\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the WebviewWindow for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const mainWindow = WebviewWindow.getByLabel('main');\n     * ```\n     *\n     * @param label The webview window label.\n     * @returns The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static getByLabel(label) {\n        if (getAll().some((w) => w.label === label)) {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            return new WebviewWindow(label, { skip: true });\n        }\n        return null;\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const focusedWindow = WebviewWindow.getFocusedWindow();\n     * ```\n     *\n     * @returns The WebviewWindow instance to communicate with the webview or `undefined` if there is not any focused window.\n     *\n     * @since 1.4\n     */\n    static async getFocusedWindow() {\n        for (const w of getAll()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n}\n/** The WebviewWindow for the current window. */\nlet appWindow;\nif ('__TAURI_METADATA__' in window) {\n    appWindow = new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\nelse {\n    console.warn(`Could not find \"window.__TAURI_METADATA__\". The \"appWindow\" value will reference the \"main\" window label.\\nNote that this is not an issue if running this frontend on a browser instead of a Tauri window.`);\n    appWindow = new WebviewWindow('main', {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: mapPhysicalPosition(m.position),\n            size: mapPhysicalSize(m.size)\n        };\n}\nfunction mapPhysicalPosition(m) {\n    return new PhysicalPosition(m.x, m.y);\n}\nfunction mapPhysicalSize(m) {\n    return new PhysicalSize(m.width, m.height);\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'currentMonitor'\n                }\n            }\n        }\n    }).then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'primaryMonitor'\n                }\n            }\n        }\n    }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'availableMonitors'\n                }\n            }\n        }\n    }).then((ms) => ms.map(mapMonitor));\n}\n\nexport { CloseRequestedEvent, LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, UserAttentionType, WebviewWindow, WebviewWindowHandle, WindowManager, appWindow, availableMonitors, currentMonitor, getAll, getCurrent, primaryMonitor };\n","import { invoke } from '../tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nasync function invokeTauriCommand(command) {\n    return invoke('tauri', command);\n}\n\nexport { invokeTauriCommand };\n","import { invokeTauriCommand } from './tauri.js';\nimport { transformCallback } from '../tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    return invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'unlisten',\n            event,\n            eventId\n        }\n    });\n}\n/**\n * Emits an event to the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param [windowLabel] The label of the window to which the event is sent, if null/undefined the event will be sent to all windows\n * @param [payload] Event payload\n * @returns\n */\nasync function emit(event, windowLabel, payload) {\n    await invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'emit',\n            event,\n            windowLabel,\n            payload\n        }\n    });\n}\n/**\n * Listen to an event from the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @return A promise resolving to a function to unlisten to the event.\n */\nasync function listen(event, windowLabel, handler) {\n    return invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'listen',\n            event,\n            windowLabel,\n            handler: transformCallback(handler)\n        }\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listen to an one-off event from the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @returns A promise resolving to a function to unlisten to the event.\n */\nasync function once(event, windowLabel, handler) {\n    return listen(event, windowLabel, (eventData) => {\n        handler(eventData);\n        _unlisten(event, eventData.id).catch(() => { });\n    });\n}\n\nexport { emit, listen, once };\n"],"names":["TauriEvent","UserAttentionType","async","invokeTauriCommand","command","invoke","_unlisten","event","eventId","__tauriModule","message","cmd","listen","windowLabel","handler","transformCallback","then","LogicalSize","constructor","width","height","this","type","PhysicalSize","toLogical","scaleFactor","LogicalPosition","x","y","PhysicalPosition","getCurrent","WebviewWindow","window","__TAURI_METADATA__","__currentWindow","label","skip","getAll","__windows","map","w","localTauriEvents","WebviewWindowHandle","listeners","Object","create","_handleTauriEvent","Promise","resolve","splice","indexOf","once","eventData","id","catch","emit","payload","includes","push","WindowManager","data","innerPosition","_ref","outerPosition","_ref2","innerSize","_ref3","outerSize","_ref4","isFullscreen","isMinimized","isMaximized","isFocused","isDecorated","isResizable","isMaximizable","isMinimizable","isClosable","isVisible","title","theme","center","requestUserAttention","requestType","requestType_","Critical","setResizable","resizable","setMaximizable","maximizable","setMinimizable","minimizable","setClosable","closable","setTitle","maximize","unmaximize","toggleMaximize","minimize","unminimize","show","hide","close","setDecorations","decorations","setAlwaysOnTop","alwaysOnTop","setContentProtected","protected_","setSize","size","Error","setMinSize","setMaxSize","setPosition","position","setFullscreen","fullscreen","setFocus","setIcon","icon","Array","from","setSkipTaskbar","setCursorGrab","grab","setCursorVisible","visible","setCursorIcon","setCursorPosition","setIgnoreCursorEvents","ignore","startDragging","onResized","WINDOW_RESIZED","e","mapPhysicalSize","onMoved","WINDOW_MOVED","mapPhysicalPosition","onCloseRequested","WINDOW_CLOSE_REQUESTED","evt","CloseRequestedEvent","isPreventDefault","onFocusChanged","unlistenFocus","WINDOW_FOCUS","unlistenBlur","WINDOW_BLUR","onScaleChanged","WINDOW_SCALE_FACTOR_CHANGED","onMenuClicked","MENU","onFileDropEvent","unlistenFileDrop","WINDOW_FILE_DROP","paths","unlistenFileHover","WINDOW_FILE_DROP_HOVER","unlistenCancel","WINDOW_FILE_DROP_CANCELLED","onThemeChanged","WINDOW_THEME_CHANGED","_preventDefault","preventDefault","options","arguments","length","undefined","super","getByLabel","some","getFocusedWindow","appWindow","mapMonitor","m","name","currentMonitor","primaryMonitor","availableMonitors","ms","console","warn"],"sourceRoot":""}